
<!DOCTYPE html>
<html>
<head>
	
	<title>Leeds Gritter Tracking</title>

	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
		   
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A==" crossorigin=""/>
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js" integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA==" crossorigin=""></script>

    <script src="https://code.jquery.com/jquery-2.1.1.min.js"></script>
 
	<!-- Esri Leaflet Plugin: https://esri.github.io/esri-leaflet/ -->
    <script src="https://unpkg.com/esri-leaflet@2.1.3/dist/esri-leaflet.js" integrity="sha512-pijLQd2FbV/7+Jwa86Mk3ACxnasfIMzJRrIlVQsuPKPCfUBCDMDUoLiBQRg7dAQY6D1rkmCcR8286hVTn/wlIg==" crossorigin=""></script>

    <!-- ESRI Renderer Plugin: https://github.com/Esri/esri-leaflet-renderers -->
    <!-- Renders feature layer using default symbology as defined by ArcGIS REST service -->
    <!-- Currently doesn't work with ESRI cluster plugin -->
    <script src="https://unpkg.com/esri-leaflet-renderers@2.0.6/dist/esri-leaflet-renderers.js" integrity="sha512-mhpdD3igvv7A/84hueuHzV0NIKFHmp2IvWnY5tIdtAHkHF36yySdstEVI11JZCmSY4TCvOkgEoW+zcV/rUfo0A==" crossorigin=""></script>
	
    <!-- Load Font Awesome icons -->
    <script src="https://use.fontawesome.com/a64989e3a8.js"></script>

	
	<style>
		html, body {
			height: 100%;
			margin: 0;
		}
		#map {
			width: 100%;
			height: 100%;
		}
	</style>

	
</head>
<body>

<div id='map'></div>

<script>
	var map = L.map('map').setView([53.7997, -1.512396], 10);

	var osmMap = L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {
		maxZoom: 18,
		attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, ' +
			'<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
			'Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
		id: 'mapbox/light-v9',
		tileSize: 512,
		zoomOffset: -1
	}).addTo(map);
	
	mapLink = '<a href="http://openstreetmap.org">OpenStreetMap</a>';
     var otmMap = L.tileLayer(
            'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; ' + mapLink + ' Contributors',
            maxZoom: 18,});
            

	
    //ESRI ArcGIS layers from Hawaii GIS Program; dynamic layer example
    //Using a relative url to call layer instead of http
     var StaticRouteLine = L.esri.featureLayer({
		url: 'https://gis2.leeds.gov.uk/arcgis/rest/services/Public/Highways/MapServer/1',
        style: function(feature) {
			return {
				fillOpacity: 0.5
				}
			}
        });

 //ESRI ArcGIS layers from Hawaii GIS Program; dynamic layer example
    //Using a relative url to call layer instead of http
     var GritBins = L.esri.featureLayer({
		url: 'https://gis2.leeds.gov.uk/arcgis/rest/services/Public/Highways/MapServer/0',
        style: function(feature) {
			return {
				fillOpacity: 0.5
				}
			}
        });
		
			$.getJSON("historic.json",function(data){
			// add GeoJSON layer to the map once the file is loaded
			var datalayer = L.geoJson(data,{
			style: function(feature) {
				switch (feature.properties.status) {
					case 'driving': return {color: "grey"};
					case 'spreading': return {color: "green"};
					case 'endOfJourney':   return {color: "black"};
					case 'idling':   return {color: "yellow"};
				}
			},
			pointToLayer: function(feature, latlng) {
				return new L.CircleMarker(latlng, {
					radius: 5, 
					fillOpacity: 0.5
				});
			},		
			onEachFeature: onEachFeature}).addTo(gritters);
	 
	});
 

var gritterIcon = L.icon({
    iconUrl: 'gritter.png',
    
    iconSize:     [38, 38], // size of the icon
    shadowSize:   [50, 64], // size of the shadow
    iconAnchor:   [22, 94], // point of the icon which will correspond to marker's location
    shadowAnchor: [4, 62],  // the same for the shadow
    popupAnchor:  [-3, -76] // point from which the popup should open relative to the iconAnchor
});

var greygritterIcon = L.icon({
    iconUrl: 'grey-gritter.png',
    
    iconSize:     [38, 38], // size of the icon
    shadowSize:   [50, 64], // size of the shadow
    iconAnchor:   [22, 94], // point of the icon which will correspond to marker's location
    shadowAnchor: [4, 62],  // the same for the shadow
    popupAnchor:  [-3, -76] // point from which the popup should open relative to the iconAnchor
});

$.getJSON("point.json",function(data){
// add GeoJSON layer to the map once the file is loaded
 var datalayer = L.geoJson(data,{
    style: function(feature) {
        switch (feature.properties.status) {
            case 'driving': return {color: "#ff0000"};
            case 'stopped':   return {color: "#0000ff"};
			case 'endOfJourney':   return {color: "black"};
			case 'idling':   return {color: "yellow"};
        }
    },
    pointToLayer: function(feature, latlng) {
        return new L.Marker(latlng, {icon:gritterIcon,
        	radius: 10, 
        	fillOpacity: 0.85
        });
    },		
		
	 onEachFeature: onEachFeature}).addTo(gritterlive).addTo(map);
	 
 });
 
 //Fetch spreading data from a GeoJSON file
 $.getJSON("spreading.json", function(json) {
      var testlayer = L.geoJson(json, {
		style: function(feature) {
        switch (feature.properties.status) {
            case 'driving': return {color: "#ff0000"};
            case 'stopped':   return {color: "#0000ff"};
			case 'endOfJourney':   return {color: "black"};
			case 'idling':   return {color: "yellow"};
			case 'spreading':   return {color: "green"};
        }
    },
    pointToLayer: function(feature, latlng) {
        return new L.CircleMarker(latlng, {
        	radius: 5, 
        	fillOpacity: 0.55
        });
    },
	  onEachFeature: onEachFeature}).addTo(spreading).addTo(map);
	 	  
	 });	    
 
 function onEachFeature(feature, layer) {
    // does this feature have a property named popupContent?
	
    if (feature.properties.date) {
        layer.bindPopup(
		feature.properties.date +"<br>" +feature.properties.status + "<br>" + feature.properties.label + "<br>" + '<a href="http://www.tivanagh.org.uk/animatev7.html?' + feature.properties.label + '">Animate Route</a>');
	 }
	 if (feature.properties.name) {
        layer.bindPopup(feature.properties.name +"<br>"+feature.properties.status + "<br>" + feature.properties.label  + "<br>" + '<a href="http://www.tivanagh.org.uk/animatev7.html?' + feature.properties.label + '">Animate Route</a>');
	 }
}

var gritters = new  L.LayerGroup();
var gritterlive = new  L.LayerGroup();
var spreading = new  L.LayerGroup();
 
  var overlays = {
 "Gritter Historic -12 hrs": gritters, 
 "Spreading Events - 12 hrs": spreading,
 "Gritters Live (updates 5min)": gritterlive,
 "Gritter Static Routes": StaticRouteLine,
 "Grit Bins": GritBins
   };
 
 var baselayers = {
 "Black and White Map": osmMap,
 "Colour Map": otmMap
 };
 
 L.control.layers(baselayers,overlays).addTo(map);
</script>



</body>
</html>
